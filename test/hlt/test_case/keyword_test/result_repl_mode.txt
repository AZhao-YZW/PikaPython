Result for test_case/keyword_test/test_keyword.py:
======[pikapython packages installed]======
pikascript-core==v1.13.3 (2024/05/25 01:26:44)
PikaStdLib===v1.13.3
time===v0.2.2
===========================================
~~~/ POWERED BY \~~~
~  pikapython.com  ~
~~~~~~~~~~~~~~~~~~~~
hello pikascript
>>> print('===== start keyword test =====')
===== start keyword test =====
>>> 
>>> # "while " 
>>> while 0 == 1:
...     print('while test: unable to reach')
... 
>>> while 1 == 1:
...     print('while test: able to reach')
...     break
... 
while test: able to reach
>>> while 1 == 1 :
...     print('while test: able to reach')
...     break
... 
while test: able to reach
>>> while 1==1:
...     print('while test: able to reach')
...     break
... 
while test: able to reach
>>> # "if "
>>> if 0 == 1:
...     print('if test: unable to reach')
... 
>>> if 1 == 1:
...     print('if test: able to reach')
... 
if test: able to reach
>>> if 1 == 1 :
...     print('if test: able to reach')
... 
if test: able to reach
>>> if 1==1:
...     print('if test: able to reach')
... 
if test: able to reach
>>> # "elif "
>>> if 0 == 1:
...     print('elif test: unable to reach')
... elif 1 == 1:
>>>     print('elif test: able to reach')
elif test: able to reach
>>> 
>>> if 0 == 1:
...     print('elif test: unable to reach')
... elif 1 == 1 :
>>>     print('elif test: able to reach')
elif test: able to reach
>>> 
>>> if 0 == 1:
...     print('elif test: unable to reach')
... elif 1==1:
>>>     print('elif test: able to reach')
elif test: able to reach
>>> 
>>> # "else"
>>> if 0 == 1:
...     print('else test: unable to reach')
... else:
>>>     print('else test: able to reach')
else test: able to reach
>>> 
>>> if 0 == 1:
...     print('else test: unable to reach')
... else :
>>>     print('else test: able to reach')
else test: able to reach
>>> 
>>> if 1 == 1:
...     print('else test: able to reach')
... else:
else test: able to reach
>>>     print('else test: unable to reach')
else test: unable to reach
>>> 
>>> # "break"
>>> while 1 == 1:
...     print('break test: only execute once')
...     break  # spaces
... 
break test: only execute once
>>> while 1 == 1:
...     print('break test: only execute once')
...     break
... 
break test: only execute once
>>> # "continue"
>>> for i in range(5):
...     if i < 3:
...         continue  # spaces
...     print('continue test: execute twice')
... 
continue test: execute twice
continue test: execute twice
>>> for i in range(5):
...     if i < 3:
...         continue
...     print('continue test: execute twice')
... 
continue test: execute twice
continue test: execute twice
>>> # "return"
>>> def return_test_func1():
...     print('return test: able to reach')
...     return  # spaces
...     print('return test: unable to reach')
... 
>>> return_test_func1()
return test: able to reach
>>> 
>>> def return_test_func2():
...     print('return test: able to reach')
...     return
...     print('return test: unable to reach')
... 
>>> return_test_func2()
return test: able to reach
>>> 
>>> # "for "
>>> for i in range(2):
...     print('for test: execute twice')
... 
for test: execute twice
for test: execute twice
>>> for i in range(2) :
...     print('for test: execute twice')
... 
for test: execute twice
for test: execute twice
>>> # "global "
>>> def global_test_func():
...     global foo
...     global  bar  # spaces
...     tmp = 1
...     foo = 2
...     bar = 3
...     print(tmp)
...     print(foo)
...     print(bar)
... 
>>> global_test_func()
1
2
3
>>> 
>>> try:
...     print(tmp)
...     print('global test: tmp is able to reach')
... except:
>>>     print('global test: tmp is unable to reach')
global test: tmp is unable to reach
>>> 
>>> try:
...     print(foo)
...     print('global test: foo is able to reach')
... except:
2
global test: foo is able to reach
>>>     print('global test: foo is unable to reach')
global test: foo is unable to reach
>>> 
>>> try:
...     print(bar)
...     print('global test: bar is able to reach')
... except:
3
global test: bar is able to reach
>>>     print('global test: bar is unable to reach')
global test: bar is unable to reach
>>> 
>>> # "del "
>>> del_test_var1 = 1
>>> del_test_var2 = 2
>>> del del_test_var1
>>> del  del_test_var2  # spaces
>>> 
>>> try:
...     print(del_test_var1)
...     print('del test: del_test_var1 is not delete')
... except:
>>>     print('del test: del_test_var1 is delete')
del test: del_test_var1 is delete
>>> 
>>> try:
...     print(del_test_var2)
...     print('del test: del_test_var2 is not delete')
... except:
>>>     print('del test: del_test_var2 is delete')
del test: del_test_var2 is delete
>>> 
>>> # "del("
>>> del_test_var3 = 3
>>> del_test_var4 = 4
>>> del(del_test_var3)
>>> del  (del_test_var4)  # spaces
>>> 
>>> try:
...     print(del_test_var3)
...     print('del test: del_test_var3 is not delete')
... except:
>>>     print('del test: del_test_var3 is delete')
del test: del_test_var3 is delete
>>> 
>>> try:
...     print(del_test_var4)
...     print('del test: del_test_var4 is not delete')
... except:
>>>     print('del test: del_test_var4 is delete')
del test: del_test_var4 is delete
>>> 
>>> # "def "
>>> try:
...     def def_test_func1():
...         print('def_test_func1')
...     
...     print('def test: def_test_func1 defined ok')
...     def_test_func1()
... except:
def test: def_test_func1 defined ok
def_test_func1
>>>     print('def test: def_test_func1 defined failed')
def test: def_test_func1 defined failed
>>> 
>>> try:
...     def def_test_func2  (  )  :  # spaces
...         print('def_test_func2')
...     
...     print('def test: def_test_func2 defined ok')
...     def_test_func2()
... except:
def test: def_test_func2 defined ok
def_test_func2
>>>     print('def test: def_test_func2 defined failed')
def test: def_test_func2 defined failed
>>> 
>>> # below codes will failed while compiling:
... # try:
>>> #     def def_test_func3:
... #         print('def_test_func1')
>>> 
>>> #     print('def test: def_test_func3 defined ok')
>>> #     def_test_func3()
>>> # except:
... #     print('def test: def_test_func3 defined failed')
>>> 
>>> # "class "
>>> try:
...     class class_test_func1():
...         def __init__(self) -> None:
...             print('class_test_func1')
...     
...     print('class test: class_test_func1 defined ok')
...     class_test_func1()
... except:
class test: class_test_func1 defined ok
class_test_func1
<object at 0x6147b531b500>
>>>     print('class test: class_test_func1 defined failed')
class test: class_test_func1 defined failed
>>> 
>>> try:
...     class class_test_func2  (  )  :  # spaces
...         def __init__(self) -> None:
...             print('class_test_func2')
...     
...     print('class test: class_test_func2 defined ok')
...     class_test_func2()
... except:
class test: class_test_func2 defined ok
class_test_func2
<object at 0x6147b531b500>
>>>     print('class test: class_test_func2 defined failed')
class test: class_test_func2 defined failed
>>> 
>>> try:
...     class class_test_func3:
...         def __init__(self) -> None:
...             print('class_test_func3')
...     
...     print('class test: class_test_func3 defined ok')
...     class_test_func3()
... except:
class test: class_test_func3 defined ok
class_test_func3
<object at 0x6147b531b500>
>>>     print('class test: class_test_func3 defined failed')
class test: class_test_func3 defined failed
>>> 
>>> try:
...     class   class_test_func4  :  # spaces
...         def __init__(self) -> None:
...             print('class_test_func4')
...     
...     print('class test: class_test_func4 defined ok')
...     class_test_func4()
... except:
class test: class_test_func4 defined ok
class_test_func4
<object at 0x6147b531b500>
>>>     print('class test: class_test_func4 defined failed')
class test: class_test_func4 defined failed
>>> 
>>> # "try" "except"
>>> try:
...     print('try except test: able to reach')
... except:
try except test: able to reach
>>>     print('try except test: unable to reach')
try except test: unable to reach
>>> 
>>> try:
...     raise
...     print('try except test: unable to reach')
... except:
>>>     print('try except test: able to reach')
try except test: able to reach
>>> 
>>> try  :  # spaces
>>>     print('try except test: able to reach')
try except test: able to reach
>>> except:
...     print('try except test: unable to reach')
... 
try except test: unable to reach
>>> try:
...     raise
...     print('try except test: unable to reach')
... except  :  # spaces
>>>     print('try except test: able to reach')
try except test: able to reach
>>> 
>>> # "raise"
>>> try:
...     raise
...     print('raise test: unable to reach')
... except:
>>>     print('raise test: able to reach')
raise test: able to reach
>>> 
>>> try:
...     raise RuntimeError("Raise Test Error")      # unsupport now
...     print('raise test: unable to reach')
... except:
'Raise Test Error'
raise test: unable to reach
>>>     print('raise test: able to reach')
raise test: able to reach
>>> 
>>> # "assert "
>>> try:
...     assert 1 == 1, 'Assert Test Error'
...     print('assert test: able to reach')
... except:
assert test: able to reach
>>>     print('assert test: unable to reach')
assert test: unable to reach
>>> 
>>> try:
...     assert 1 == 0, 'Assert Test Error'
...     print('assert test: unable to reach')
... except:
AssertionError: Assert Test Error
>>>     print('assert test: able to reach')
Error: line buff overflow, please use bigger 'PIKA_LINE_BUFF_SIZE'
